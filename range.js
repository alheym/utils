// Range
// Реализовать функцию, которая генерирует числовые последовательности с заданным шагом. 
// Функция должна принимать три аргумента:
// start — число, с которого начнётся последовательность. Это необязательный аргумент: по умолчанию функция должна начинать с 0.
// end — число, конец последовательности. Функция должна остановиться, не доходя до этого значения.
// step — число, шаг между элементами в последовательности. Это необязательный аргумент: значение по умолчанию — 1.
// В результате функция должна вернуть массив чисел заданной последовательности.


/*
    * range(4); // => [0, 1, 2, 3] 
    * range(-4); // => [0, -1, -2, -3]
    * range(1, 5); // => [1, 2, 3, 4]
    * range(0, 20, 5); // => [0, 5, 10, 15]
    * range(0, -4, -1); // => [0, -1, -2, -3]
    * range(1, 4, 0); // => [1, 1, 1]
    * range(0); // => []
*/

function range(start, end, step = 1) {

    let arr = [];

    if (end === undefined && start > 0) {
        return [...new Array(start).keys()];
    }


    if (start < 0) {
        for (let i = 0; i > start; i--) {
            arr.push(i);
        }
    }
    else if (step === 0) {
        for (let i = 0; i < end - 1; i++) {
            arr.push(start);
        }
    }
    else {
        arr = Array.from({ length: ((end - 1) - start) / step + 1 }, (_, i) => start + (i * step));
    }

    return arr;
}

console.log(range(4)); // => [0, 1, 2, 3] 
console.log(range(-4)); // => [0, -1, -2, -3]
console.log(range(1, 5)); // => [1, 2, 3, 4]
console.log(range(0, 20, 5)); // => [0, 5, 10, 15]
console.log(range(0, -4, -1)); // => [0, -1, -2, -3]
console.log(range(1, 4, 0)); // => [1, 1, 1]
console.log(range(0)); // => []
